/*
 ****************************************************************
 * Mach Operating System
 * Copyright (c) 1986 Carnegie-Mellon University
 *  
 * This software was developed by the Mach operating system
 * project at Carnegie-Mellon University's Department of Computer
 * Science. Software contributors as of May 1986 include Mike Accetta, 
 * Robert Baron, William Bolosky, Jonathan Chew, David Golub, 
 * Glenn Marcy, Richard Rashid, Avie Tevanian and Michael Young. 
 * 
 * Some software in these files are derived from sources other
 * than CMU.  Previous copyright and other source notices are
 * preserved below and permission to use such software is
 * dependent on licenses from those institutions.
 * 
 * Permission to use the CMU portion of this software for 
 * any non-commercial research and development purpose is
 * granted with the understanding that appropriate credit
 * will be given to CMU, the Mach project and its authors.
 * The Mach project would appreciate being notified of any
 * modifications and of redistribution of this software so that
 * bug fixes and enhancements may be distributed to users.
 *
 * All other rights are reserved to Carnegie-Mellon University.
 ****************************************************************
 */
/*
 * 5799-CGZ (C) COPYRIGHT IBM CORPORATION  1986
 * LICENSED MATERIALS - PROPERTY OF IBM
 * REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER G120-2083
 */
/* $Header: pspreg.h,v 5.0 86/01/31 18:13:14 ibmacis ibm42a $ */
/* $Source: /ibm/acis/usr/sys_ca/caio/RCS/pspreg.h,v $ */

#if !defined(lint) && !defined(LOCORE)  && defined(RCS_HDRS)
static char *rcsidpspreg = "$Header: pspreg.h,v 5.0 86/01/31 18:13:14 ibmacis ibm42a $";
#endif

/* This early version will include the description of registers and bits related to the asynchronous operation only */


/* Bit definition for the external registers. Read function */

#define	EXT_DTR		0x01	/*  1= active  Data Terminal Ready   */
#define	EXT_DSR		0x02	/*  1= active  Data Set Ready        */
#define	EXT_RI		0x04	/*  1= active  Ring indicator        */
#define	EXT_DSR_CHG		0x08	/*  0= DSR has changed or RI is active */
#define	DMA_TC		0x10	/*  0= Terminal count (DMA) */

/* Bit definition for the external registers.  Write function */
#define	DTR		0x01	/*  1= active  Data Terminal Ready  */
#define	EN_DMA01	0x02	/*  1= Enable DMA and use 
					DMA channel 0 for psp0
					DMA channel 1 for psp1      */
#define	EN_DMA23	0x04	/*  1= Enable DMA and use
					DMA channel 2 for psp0
					DMA channel 3 for psp1      */
#define CLR_INT_DSR	0x08	/*  1= clear int. generated by DSR & RI */
#define	CLR_INT_TC	0x10	/*  1= Clear int. generated by DMA_TC   */
#define	EN_LINE_INT	0x20	/*  1= Enable int. DSR/RI ,DMA_TC       */

/* Commands for the  Command register  W0   */

#define	RST_EXT_INT		0x10	/* reset EXT/STATUS  interrupts */
#define RST_TX_INT		0x28	/* reset transmit interrupt pending */
#define RST_ERROR		0x30	/* reset error (overrun ,parity) */
#define RST_IUS			0x38	/* reset int. under service */



/* Bits in W1  - mode register */

#define EN_EXT_INT		0x01	/* Enable ext  int.       */
#define EN_TX_INT		0x02	/* Enable tx int.       */
#define PARITY_SPE		0x04	/* parity special       */
#define RX_INT_MODE		0x10	/* int on all  Rx       */

/* Bits is W3 - Receiver Parameters and Control */
#define	RX_ENABLE		0x01	/* Enable receiver */
#define RX_5BITS		0x00	/* Recerive 5 bits */
#define RX_6BITS		0x80	/* Recerive 6 bits */
#define RX_7BITS		0x40	/* Recerive 7 bits */
#define RX_8BITS		0xC0	/* Recerive 8 bits */

/* Bits in W4 - Transmit/Receive Miscellanous Parameters and Mode */

#define EN_PARITY		0x01	/* Enable parity  */
#define PARITY_EV		0x02	/* Even parity   */
#define STOP1			0x04	/* One stop bit  */
#define STOP2			0xC0	/* Two stop bits */
#define CLOCK16			0x40	/* Clock rate is 16 x the data rate */

/* Bits  in W5 - Transmit Parameter and Controls */
#define RTS			0x02	/* RTS */
#define	TX_5BITS		0x00	/* Transmit 5 bits */
#define	TX_6BITS		0x40	/* Transmit 6 bits */
#define	TX_7BITS		0x20	/* Transmit 7 bits */
#define	TX_8BITS		0x60	/* Transmit 8 bits */
#define BREAK			0x10	/* Send break */
#define TX_ENABLE		0x08	/* Enable  transmitter */ 


/* Bits in W9 - Master Interupt Control*/
#define RST_A			0x40	/* reset channel A */
#define RST_B			0x80	/* reset channel B */
#define RST_HARD		0xC0	/* force hardware reset */
#define MIE			0x08	/* Master Int. Enable */
#define NO_VECTOR		0x02	/* No vector in int Acknoewlege */

/* Bits in W15 -*/
#define W15_DCD_IE		0x08	/* Enable carrier detect */

/* Bits in R0 - Trans/ rece buffer stat */
#define R0_CHAR_AVAIL	0x01		/* Rx charter available */
#define TX_EMPTY	0x04		/* Tx empty */
#define R0_DCD		0x08		/* carrier detect */
/* Bits in  R1 - Status  */
#define	ALL_SENT		0x01	/* all character are transmitted */
#define PARITY_ERR		0x10	/* Parity error */
#define OVERRUN_ERR		0x20	/* Overrun error */
#define FRAM_ERR		0x40	/* Framing error */

 /* Bits in R2 - Interrupt Pending register  */
#define TX_B			0x02	/* Tx channel B pending */
#define RX_B			0x04	/* Rx channel B pending */
#define TX_A			0x10	/* Tx channel A pending */
#define RX_A			0x20	/* Tx channel A pending */

/* plannar serial port register definition */

struct pspdevice {
	 int control;
	 int data;
	 int ext_reg;
	 int int_ack;
	};

#define W0 0
#define W1 1
#define W2 2
#define W3 3
#define W4 4
#define W5 5
#define W6 6
#define W7 7
#define W8 8
#define W9 9
#define W10 10
#define W11 11
#define W12 12
#define W13 13
#define W14 14
#define W15 15

#define R0  0
#define R1  1
#define R2  2
#define R3  3
#define R4  4
#define R5  5
#define R6  6
#define R7  7
#define R8  8
